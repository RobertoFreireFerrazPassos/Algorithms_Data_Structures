using Algorithms_Data_Structures.Algorithms.Sort;
using BenchmarkDotNet.Attributes;

namespace Benchmark.Benchmarks
{
    /*
        |                     Method |          Mean |         Error |        StdDev |
        |--------------------------- |--------------:|--------------:|--------------:|
        |  SelectionSort_SimpleInput |      49.22 ns |      1.006 ns |      0.892 ns |
        |      QuickSort_SimpleInput |     235.73 ns |      4.762 ns |      8.214 ns |
        |     BubbleSort_SimpleInput |      10.95 ns |      0.298 ns |      0.264 ns |
        |     InsertSort_SimpleInput |      55.76 ns |      1.090 ns |      2.020 ns |
        | SelectionSort_ComplexInput | 639,210.13 ns | 12,652.781 ns | 12,426.723 ns |
        |     QuickSort_ComplexInput |  55,277.40 ns |  1,065.522 ns |    944.557 ns |
        |    BubbleSort_ComplexInput |   1,023.18 ns |     20.321 ns |     22.586 ns |
        |    InsertSort_ComplexInput | 646,313.76 ns | 12,848.726 ns | 13,194.695 ns |
    */

    public class SortAlgorithmsBenchmark
    {
        private int[] simpleInput = new int[] { 10, 64, 80, 30, 70, 25, 25, 12 };        

        [Benchmark]
        public int[] SelectionSort_SimpleInput() => SelectionSort.Sort(simpleInput);

        [Benchmark]
        public int[] QuickSort_SimpleInput() => QuickSort.Sort(simpleInput);

        [Benchmark]
        public int[] BubbleSort_SimpleInput() => BubbleSort.Sort(simpleInput);

        [Benchmark]
        public int[] InsertSort_SimpleInput() => InsertSort.Sort(simpleInput);

        private int[] complexInput = new int[] {
            10, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 90, 25, 12, 43, 11, 34,
            13, 64, 80, 35, 70, 25, 25, 12, 22, 11, 25, 45, 70, 84, 25, 12, 43, 11, 34,
            56, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 13, 25, 12, 43, 11, 53,
            23, 64, 80, 24, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 24, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 68, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 35, 70, 25, 25, 12, 22, 11, 46, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 75, 45, 70, 95, 25, 12, 43, 11, 34,
            13, 64, 80, 30, 70, 25, 25, 12, 22, 11, 75, 45, 70, 84, 25, 12, 43, 11, 34,
            56, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 13, 25, 12, 43, 11, 53,
            23, 64, 80, 23, 70, 25, 25, 12, 22, 57, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            13, 64, 12, 46, 34, 25, 25, 12, 22, 11, 46, 46, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 34, 70, 25, 25, 12, 22, 18, 25, 34, 70, 23, 25, 12, 43, 11, 34,
            13, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 84, 25, 12, 43, 11, 34,
            56, 64, 80, 46, 70, 25, 25, 12, 22, 11, 25, 45, 70, 13, 25, 12, 43, 11, 53,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 23, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            13, 64, 12, 85, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 46, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 46, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 74, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            10, 64, 12, 97, 71, 25, 12, 12, 22, 81, 25, 34, 70, 90, 25, 12, 43, 11, 34,
            89, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 54, 12, 25, 12, 43, 11, 38,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            16, 64, 80, 30, 70, 25, 25, 12, 24, 17, 25, 45, 70, 90, 25, 12, 43, 11, 98,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 13, 70, 25, 25, 12, 22, 11, 25, 64, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 23, 70, 54, 25, 12, 22, 91, 25, 86, 70, 45, 25, 12, 43, 11, 34,
            23, 64, 80, 25, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 24, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            10, 64, 12, 30, 71, 25, 12, 12, 22, 81, 25, 34, 70, 90, 25, 12, 43, 11, 34,
            89, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 54, 12, 25, 12, 43, 11, 38,
            13, 64, 12, 48, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            16, 64, 80, 80, 70, 25, 25, 12, 24, 17, 25, 86, 70, 90, 25, 12, 43, 11, 98,
            13, 64, 12, 46, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 34, 70, 25, 25, 12, 22, 18, 25, 68, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 45, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            10, 64, 12, 47, 71, 25, 12, 12, 22, 81, 25, 57, 70, 90, 25, 12, 43, 11, 34,
            89, 64, 80, 80, 70, 25, 25, 12, 22, 11, 25, 45, 54, 12, 25, 12, 43, 11, 38,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            16, 64, 80, 30, 70, 25, 25, 12, 24, 17, 25, 45, 70, 90, 25, 12, 43, 11, 98,
            13, 64, 12, 48, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 86, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 23, 70, 25, 25, 12, 22, 18, 25, 86, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 10, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34};

        [Benchmark]
        public int[] SelectionSort_ComplexInput() => SelectionSort.Sort(complexInput);

        [Benchmark]
        public int[] QuickSort_ComplexInput() => QuickSort.Sort(complexInput);

        [Benchmark]
        public int[] BubbleSort_ComplexInput() => BubbleSort.Sort(complexInput);

        [Benchmark]
        public int[] InsertSort_ComplexInput() => InsertSort.Sort(complexInput);
    }
}
