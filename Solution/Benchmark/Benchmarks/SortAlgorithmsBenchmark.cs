using Algorithms_Data_Structures.Algorithms.Sort;
using BenchmarkDotNet.Attributes;

namespace Benchmark.Benchmarks
{
    /*
    */

    public class SortAlgorithmsBenchmark
    {
        private int[] simpleInput = new int[] { 10, 64, 80, 30, 70, 25, 25, 12 };        

        [Benchmark]
        public int[] SelectionSort_SimpleInput() => SelectionSort.Sort(simpleInput);

        [Benchmark]
        public int[] QuickSort_SimpleInput() => QuickSort.Sort(simpleInput);

        private int[] complexInput = new int[] {
            10, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 90, 25, 12, 43, 11, 34,
            13, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 84, 25, 12, 43, 11, 34,
            56, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 13, 25, 12, 43, 11, 53,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            13, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 84, 25, 12, 43, 11, 34,
            56, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 13, 25, 12, 43, 11, 53,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            13, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 84, 25, 12, 43, 11, 34,
            56, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 13, 25, 12, 43, 11, 53,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            10, 64, 12, 30, 71, 25, 12, 12, 22, 81, 25, 45, 70, 90, 25, 12, 43, 11, 34,
            89, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 54, 12, 25, 12, 43, 11, 38,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            16, 64, 80, 30, 70, 25, 25, 12, 24, 17, 25, 45, 70, 90, 25, 12, 43, 11, 98,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            10, 64, 12, 30, 71, 25, 12, 12, 22, 81, 25, 45, 70, 90, 25, 12, 43, 11, 34,
            89, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 54, 12, 25, 12, 43, 11, 38,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            16, 64, 80, 30, 70, 25, 25, 12, 24, 17, 25, 45, 70, 90, 25, 12, 43, 11, 98,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34,
            10, 64, 12, 30, 71, 25, 12, 12, 22, 81, 25, 45, 70, 90, 25, 12, 43, 11, 34,
            89, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 54, 12, 25, 12, 43, 11, 38,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            16, 64, 80, 30, 70, 25, 25, 12, 24, 17, 25, 45, 70, 90, 25, 12, 43, 11, 98,
            13, 64, 12, 30, 34, 25, 25, 12, 22, 11, 25, 45, 77, 56, 25, 12, 43, 11, 65,
            10, 64, 98, 30, 70, 25, 25, 12, 22, 11, 25, 45, 47, 90, 25, 12, 43, 11, 34,
            12, 64, 83, 30, 70, 25, 25, 12, 22, 18, 25, 45, 70, 23, 25, 12, 43, 11, 34,
            23, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 95, 25, 12, 43, 11, 34,
            94, 64, 80, 30, 70, 25, 25, 12, 22, 11, 25, 45, 70, 89, 25, 12, 43, 11, 34,
            12, 64, 66, 30, 70, 54, 25, 12, 22, 91, 25, 45, 70, 45, 25, 12, 43, 11, 34};

        [Benchmark]
        public int[] SelectionSort_ComplexInput() => SelectionSort.Sort(complexInput);

        [Benchmark]
        public int[] QuickSort_ComplexInput() => QuickSort.Sort(complexInput);
    }
}
